{{>licenseInfo}}
#ifndef _{{namespace}}_{{classname}}_H_
#define _{{namespace}}_{{classname}}_H_

{{#imports}}{{{import}}}
{{/imports}}

#include <QNetworkReply>

namespace {{namespace}} {

class {{prefix}}HttpRequestInputFileElement;
class {{prefix}}HttpRequestWorker;

class {{classname}}: public QObject {

    Q_OBJECT

    QString _host;
    QString _basePath;
    QList<QNetworkReply::RawHeaderPair> _lastRawHeaderPairs;

public:
    {{classname}}(QObject *parent = nullptr);
    {{classname}}(const QString &host, const QString &basePath, QObject *parent = nullptr);
    virtual ~{{classname}}() override;

    const QList<QNetworkReply::RawHeaderPair> &    lastRawHeaderPairs() const;

    {{#operations}}{{#operation}}{{#vendorExtensions.isFile}}QNetworkRequest {{/vendorExtensions.isFile}}{{^vendorExtensions.isFile}}void{{/vendorExtensions.isFile}} {{nickname}}({{#allParams}}{{{vendorExtensions.paramType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    {{/operation}}{{/operations}}
private:
    {{#operations}}{{#operation}}{{^vendorExtensions.isFile}}
void {{nickname}}Callback ({{namespace}}::{{prefix}}HttpRequestWorker * worker);
{{/vendorExtensions.isFile}}{{/operation}}{{/operations}}
signals:

    {{#operations}}{{#operation}}{{^vendorExtensions.isFile}}
void {{nickname}}Signal({{#returnType}}{{{returnType}}} summary, {{/returnType}}bool ok, QString message);
{{/vendorExtensions.isFile}}
{{#vendorExtensions.isFile}}
{{/vendorExtensions.isFile}}

    {{/operation}}{{/operations}}
};
}
#endif
